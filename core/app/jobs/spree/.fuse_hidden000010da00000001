module Spree
  LinkshareJob ||= Struct.new do
    FEED_NAME = 'linkshare_feed'

    def perform
      Rails.cache.write(FEED_NAME, feed)
    end

    def feed
      builder = Nokogiri::XML::Builder.new {|xml| 
        xml.feed("xml:lang" => "en-GB", 
                 "xmlns" => "http://www.w3.org/2005/Atom", 
                 "xmlns:g" => "http://base.google.com/ns/1.0", 
                 "xmlns:c" => "http://base.google.com/cns/1.0") { 
          xml.id_ ""
          xml.title "Wool And The Gang Atom Feed"
          xml.updated_at Time.now.iso8601
          xml.link(rel: "alternate", type: "text/html", href: host)
          xml.link(rel: "self", type: "application/atom+xml", href: spree.api_linkshare_index_path)
          xml.link spree.api_linkshare_index_path
          xml.author {
            xml.nane "Wool And The Gang"}
          
          variants.each {|v|
            xml.entry {
              xml.title    v.name
              xml.id_      v.number
              xml.link     v.product_page_url
              xml.summary  v.product.description
              xml.updated_at v.updated_at.iso8601
              
              v.images.each_with_index {|img, idx|
                if idx == 0
                  xml['g'].image_link img.attachment.url(:large)
                else
                  xml['g'].additional_image_link img.attachment.url(:large)
                end
              }
              xml['g'].price v.price_with_currency
              xml['g'].condition "new"
              xml['g'].availability "in stock"
              xml['g'].gender v.target

              xml['g'].color v.color_and_sive_option_values[:color]
              xml['g'].size  v.color_and_sive_option_values[:size]

              if v.product.respond_to?(:product_type) && v.product.product_type.respond_to?(:name)
                xml['g'].google_product_category v.product.category
                xml['g'].product_type v.product.product_type.name
              else
                xml['g'].product_type v.product_type
              end
          }}}

      variants = Spree::Variant.
        accessible_by(current_ability, :read).
        page(params[:page]).
        per(params[:per_page])
      
      @variants = VariantDecorator.decorate_collection(variants)
      builder.to_xml
    end

    private
    def host
      "http://---.com"
    end

    def variants

    end
  end
end
